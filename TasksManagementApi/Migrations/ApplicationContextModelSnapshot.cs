// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasksManagementApi.Data;

#nullable disable

namespace TasksManagementApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ProjectMemberTask", b =>
                {
                    b.Property<ulong>("AssignedToId")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong>("TasksId")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("AssignedToId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("ProjectMemberTask");
                });

            modelBuilder.Entity("TagTask", b =>
                {
                    b.Property<ulong>("TagsId")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong>("TasksId")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("TagsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("TagTask");
                });

            modelBuilder.Entity("TasksManagementApi.Models.ActivityLog", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("activity_logs", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.Document", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<ulong>("TaskCommentId")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskCommentId");

                    b.ToTable("documents", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.Project", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.ProjectMember", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("ProjectId")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("project_members", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.Role", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.SubTask", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<bool>("Completed")
                        .HasMaxLength(255)
                        .HasColumnType("tinyint(255)")
                        .HasColumnName("completed");

                    b.Property<DateTime>("DeadLine")
                        .HasMaxLength(255)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dead_line");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasMaxLength(255)
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<DateTime>("StartDate")
                        .HasMaxLength(255)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<ulong>("TaskId")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("sub_tasks", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.Tag", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("HexadecimalColor")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("hexadecimal_color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.Task", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime>("DeadLine")
                        .HasMaxLength(255)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dead_line");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasMaxLength(255)
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<DateTime>("StartDate")
                        .HasMaxLength(255)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<ulong>("StatusId")
                        .HasColumnType("bigint(20) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.TaskComment", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<ulong>("AuthorId")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<ulong?>("ResponseOfId")
                        .HasColumnType("bigint(20) unsigned");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ResponseOfId");

                    b.ToTable("task_comments", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.TaskStatus", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tasks_status", (string)null);
                });

            modelBuilder.Entity("TasksManagementApi.Models.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("ProfilePictureFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_picture_file_name");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ProjectMemberTask", b =>
                {
                    b.HasOne("TasksManagementApi.Models.ProjectMember", null)
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TasksManagementApi.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagTask", b =>
                {
                    b.HasOne("TasksManagementApi.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TasksManagementApi.Models.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TasksManagementApi.Models.ActivityLog", b =>
                {
                    b.HasOne("TasksManagementApi.Models.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TasksManagementApi.Models.Document", b =>
                {
                    b.HasOne("TasksManagementApi.Models.TaskComment", "TaskComment")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskComment");
                });

            modelBuilder.Entity("TasksManagementApi.Models.ProjectMember", b =>
                {
                    b.HasOne("TasksManagementApi.Models.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TasksManagementApi.Models.Role", "Role")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TasksManagementApi.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TasksManagementApi.Models.SubTask", b =>
                {
                    b.HasOne("TasksManagementApi.Models.Task", "Task")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TasksManagementApi.Models.Task", b =>
                {
                    b.HasOne("TasksManagementApi.Models.TaskStatus", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("TasksManagementApi.Models.TaskComment", b =>
                {
                    b.HasOne("TasksManagementApi.Models.ProjectMember", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TasksManagementApi.Models.TaskComment", "ResponseOf")
                        .WithMany()
                        .HasForeignKey("ResponseOfId");

                    b.Navigation("Author");

                    b.Navigation("ResponseOf");
                });

            modelBuilder.Entity("TasksManagementApi.Models.Project", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("TasksManagementApi.Models.ProjectMember", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("TasksManagementApi.Models.Role", b =>
                {
                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("TasksManagementApi.Models.Task", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("TasksManagementApi.Models.TaskComment", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("TasksManagementApi.Models.TaskStatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TasksManagementApi.Models.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
